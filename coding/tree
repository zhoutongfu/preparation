// perform depth first search
void createLevelLinkedList(TreeNode root,ArrayList<LinkedList<TreeNode>> lists, int level){
	if (root == null) return;

	LinkedList<TreeNode> list = null;
	if (lists.size() == level){
		list = new LinkedList<TreeNode>();
		lists.add(list);
	}else{
		list = lists.get(level);
	}
	list.add(root);
	createLevelLinkedList(root.left, lists,level +1)
	createLevelLinkedList(root.right, lists,level +1)
}

ArrayList<LinkedList<TreeNode>> createLevelLinkedList(TreeNode root){
	ArrayList<LinkedList<TreeNode>> lists = new ArrayList<LinkedList<TreeNode>>();
	createLevelLinkedList(root,lists,0);
	return lists;
}



// breadth first search
ArrayList<LinkedList<TreeNode>> createLevelLinkedList(TreeNode root){
	ArrayList<LinkedList<TreeNode>> result = new ArrayList<LinkedList<TreeNode>>();

	LinkedList<TreeNode> current = new LinkedList<TreeNode>();
	if (root != null){
		current.add(root)
	}

	while (current.size() > 0){
		result.add(current);
		LinkedList<TreeNode> parents = current;
		current = new LinkedList<TreeNode>();
		for (TreeNode parent :parents){
			if (parent.left != null)
				current.add(parent.left);
			if (parent.right != null)
				current.add(parent.right);
		}
	}

	return result;
}


Integer findSize(Node root, int size){
	if (root == null)
		return 0;
	else{
		return findSize(root.left) + findSize(root.right) + 1
	}
	
}


return findSize(root,0)